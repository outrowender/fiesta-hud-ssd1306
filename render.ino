
// Draw current speed in Km/h.
void drawSpeed(int speed) {
  const int x = 80;
  const int y = 30;

  // Format speed.
  char speedChar[4];
  snprintf(speedChar, 4, "%d", speed);

  u8g2.firstPage();
  u8g2.setColorIndex(1);
  do {    
    // Draw speed numbers.
    u8g2.setFont(u8g2_font_freedoomr25_mn);
    u8g2.drawStr(x - u8g2.getStrWidth(speedChar), y, speedChar);

    // Draw Km/h.
    u8g2.setFont(u8g2_font_6x12_me);
    u8g2.drawStr(x + 2, y - 2, "Km/h");
  } while (u8g2.nextPage());
}

// Draw RPM values divided by 1000.
void drawRpm(int rpm) {
  const int x = 80;
  const int y = 30;

  // Format RPM.
  const double divided = rpm / 1000.0;
  char rotation[5];
  dtostrf(divided, 3, 1, rotation);

  u8g2.firstPage();
  do {

    if (divided >= RPM_SHIFT_LIGHT) {
      u8g2.setColorIndex(1);
      u8g2.drawBox(0, 0, 128, 32);
      u8g2.setColorIndex(0);
    } else {
      u8g2.setColorIndex(1);
    }

    // Draw rpm numbers divided by 1000.
    u8g2.setFont(u8g2_font_freedoomr25_mn);
    u8g2.drawStr(x - u8g2.getStrWidth(rotation), y, rotation);

    // Draw rpm x1000.
    u8g2.setFont(u8g2_font_6x12_me);
    u8g2.drawStr(x + 3, y - 12, "rpm");
    u8g2.drawStr(x + 3, y - 2, "x1000");
  } while (u8g2.nextPage());
}

// Draw temperature in Celsius.
void drawTemp(int temp) {
  const int x = 80;
  const int y = 30;

  // format temp
  char tempChar[4];
  snprintf(tempChar, 4, "%d", temp);

  u8g2.firstPage();
  u8g2.setColorIndex(1);
  do {
    // Draw temperature.
    u8g2.setFont(u8g2_font_freedoomr25_mn);
    u8g2.drawStr(x - u8g2.getStrWidth(tempChar), y, tempChar);

    u8g2.setFont(u8g2_font_6x12_me);
    // Draw little "Â°".
    u8g2.drawStr(x + 3, y - 20, "0");
    // Draw temp string.
    u8g2.drawStr(x + 3, y - 2, "temp");

  } while (u8g2.nextPage());
}

const unsigned char image_ford_copy_bits[] PROGMEM = {
  0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
  0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x03,0x80,0xff,0x07,
  0x00,0x0f,0x00,0x00,0x00,0xf0,0x00,0x00,0xfa,0xff,0xff,0x07,0x00,
  0x00,0x00,0x38,0x00,0x80,0xc3,0xff,0xff,0x03,0x00,0x00,0x00,0x1c,
  0x00,0xc0,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x0e,0x00,0x60,0x00,
  0xe0,0x3f,0x00,0x00,0x00,0x00,0x0e,0x10,0x30,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0e,0x08,0x18,0x06,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0e,0x0c,0x1c,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x1e,0x07,0x0e,
  0x09,0x00,0x00,0x00,0x00,0x78,0x00,0xfe,0x03,0x06,0x05,0x00,0x00,
  0x00,0x00,0x38,0x00,0xfc,0x01,0xc7,0x07,0x00,0x00,0x00,0x00,0x3c,
  0x00,0xf8,0xf0,0xff,0x03,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0xfe,
  0x01,0x02,0x00,0x00,0x00,0x00,0x1e,0x00,0x00,0xc3,0x01,0x00,0x00,
  0x00,0x00,0x00,0x0f,0x00,0x00,0xe0,0x00,0x02,0xe0,0x60,0x00,0x06,
  0x0f,0x60,0x00,0x70,0x80,0x37,0xf8,0xf9,0xc0,0x9f,0x07,0x30,0x00,
  0x70,0xe0,0x61,0xfc,0xff,0xe1,0xbb,0x03,0x1c,0x00,0x38,0x70,0x60,
  0xce,0xff,0xf0,0xf0,0x03,0x0c,0x00,0x1c,0x38,0x60,0xc6,0xf7,0x38,
  0xf0,0x01,0x0e,0x00,0x1e,0x18,0xe0,0xc3,0x03,0x1c,0xf0,0x01,0x0e,
  0x00,0x0f,0x1c,0xe0,0xe1,0x03,0x1e,0xf0,0x00,0x0e,0x80,0x07,0x0c,
  0xe0,0xe0,0x86,0x0f,0xf8,0x00,0x0e,0xc0,0x07,0x0e,0x70,0xf0,0xfe,
  0x0f,0x78,0x10,0x1e,0xf0,0x03,0x0e,0x70,0x70,0x78,0x07,0x3c,0x18,
  0x3e,0xfc,0x01,0x0f,0x38,0x78,0x00,0x07,0x3e,0x0c,0xfe,0xff,0x80,
  0x0f,0x1c,0x3c,0x00,0x0f,0x1f,0x06,0xfc,0x7f,0xc0,0x1c,0x0f,0x1c,
  0x00,0xdf,0x9f,0x03,0xf8,0x3f,0x00,0xfc,0x07,0x1e,0x00,0xfe,0xfd,
  0x01,0xe0,0x0f,0x00,0xf0,0x01,0x0e,0x00,0x7c,0x78,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


void drawLogo() {
  Serial.println("logo was shown");

  u8g2.firstPage();
  u8g2.setColorIndex(1);
  do {
    u8g2.setBitmapMode(1);
    u8g2.setFontMode(1);
    u8g2.drawXBMP( 24, 0, 80, 32, image_ford_copy_bits);

  } while (u8g2.nextPage());

  logoWasShown = true;
  delay(5000);
}
